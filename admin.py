from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import logging

from config import ADMINS
from database import (
    get_message_by_id,
    update_status_and_response,
    export_all_messages,
    get_all_messages
)

router = Router()


class AdminStates(StatesGroup):
    choosing_message = State()
    typing_response = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(message: Message) -> bool:
    return message.from_user.id in ADMINS


# –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ Excel
@router.message(Command("export"))
async def export_messages(message: Message):
    if not is_admin(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        file_path = export_all_messages()
        file = FSInputFile(file_path)
        await message.answer_document(file, caption="üìä –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    rows = get_all_messages()
    if not rows:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
        return

    kb = []
    for r in rows:
        status = r[3]
        label = f"üÜî#{r[0]} | {r[1]} | {status}"
        kb.append([KeyboardButton(text=label)])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    )
    await state.set_state(AdminStates.choosing_message)


# –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(AdminStates.choosing_message)
async def admin_choose_message(message: Message, state: FSMContext):
    try:
        msg_id = int(message.text.split("#")[1].split(" ")[0])
        record = get_message_by_id(msg_id)
        if not record:
            await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        await state.update_data(selected_id=msg_id, user_id=record[1], is_anonymous=record[6])

        text = f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ #{msg_id}:\n\n{record[2]}\n\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:"
        await message.answer(text, reply_markup=ReplyKeyboardRemove())
        await state.set_state(AdminStates.typing_response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ê–¥–º–∏–Ω –ø–∏—à–µ—Ç –æ—Ç–≤–µ—Ç
@router.message(AdminStates.typing_response)
async def admin_send_response(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_id = data["selected_id"]
    user_id = data["user_id"]
    is_anonymous = data["is_anonymous"]
    response = message.text

    update_status_and_response(msg_id, "‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ", response)

    if not is_anonymous:
        try:
            await message.bot.send_message(
                chat_id=user_id,
                text=f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (ID: {msg_id}):\n\n{response}"
            )
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    else:
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–æ–Ω–∏–º–µ–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    await state.clear()
