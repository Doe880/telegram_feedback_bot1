# admin.py
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import logging

from config import ADMINS
from database import (
    get_message_by_id,
    update_status_and_response,
    export_all_messages,
    get_all_messages
)

router = Router()
logger = logging.getLogger(__name__)


class AdminStates(StatesGroup):
    choosing_message = State()
    typing_response = State()


def is_admin(message: Message) -> bool:
    # –í–∞–∂–Ω–æ: ADMINS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º int –≤ config.py
    return message.from_user and message.from_user.id in ADMINS


# –ù–∞ /start —É –∞–¥–º–∏–Ω–∞ –æ—á–∏—â–∞–µ–º –µ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ –æ–±—ã—á–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º
@router.message(CommandStart())
async def admin_reset_on_start(message: Message, state: FSMContext):
    if not is_admin(message):
        return
    if await state.get_state():
        await state.clear()
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º ‚Äî –æ–±—â–∏–π /start –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è user-—Ö–µ–Ω–¥–ª–µ—Ä–æ–º


# –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ Excel
@router.message(Command("export"))
async def export_messages(message: Message):
    if not is_admin(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        file_path = export_all_messages()
        file = FSInputFile(file_path)
        await message.answer_document(file, caption="üìä –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.")


# –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    rows = get_all_messages()
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return

    kb = []
    for r in rows:
        # r: (id, type, message, status)
        label = f"üÜî#{r[0]} | {r[1]} | {r[3]}"
        kb.append([KeyboardButton(text=label)])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    )
    await state.set_state(AdminStates.choosing_message)


# –í—ã–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@router.message(AdminStates.choosing_message)
async def admin_choose_message(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–∞ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start –∏–ª–∏ /export), –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ç
    if message.text and message.text.startswith("/"):
        return

    try:
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: "üÜî#<id> | ..."
        msg_id = int(message.text.split("#")[1].split(" ")[0])
        record = get_message_by_id(msg_id)
        if not record:
            await message.answer("‚ö†Ô∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /admin –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        # record: (id, user_id, type, message, name, position, is_anonymous, reason, file_path, status, answer, created_at)
        await state.update_data(selected_id=msg_id, user_id=record[1], is_anonymous=record[6])

        # –í–ê–ñ–ù–û: —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî record[3], –∞ –Ω–µ record[2]
        text = f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ #{msg_id}:\n\n{record[3]}\n\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:"
        await message.answer(text, reply_markup=ReplyKeyboardRemove())
        await state.set_state(AdminStates.typing_response)

    except Exception as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–∂–º–∏—Ç–µ /admin –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")


# –í–≤–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
@router.message(AdminStates.typing_response)
async def admin_send_response(message: Message, state: FSMContext):
    data = await state.get_data()
    msg_id = data["selected_id"]
    user_id = data["user_id"]
    is_anonymous = data["is_anonymous"]
    response = message.text

    try:
        update_status_and_response(msg_id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", response)

        if not is_anonymous:
            try:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (ID: {msg_id}):\n\n{response}"
                )
                await message.answer("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.clear()
