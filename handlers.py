# handlers.py
from aiogram import Router, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from config import ADMINS, MANAGERS
from database import insert_message, get_user_messages
from pathlib import Path
import aiofiles
from utils import save_file
import logging

router = Router()
logging.basicConfig(level=logging.INFO)

BACK_TEXT = "‚¨Ö –ù–∞–∑–∞–¥"
BACK_BTN = KeyboardButton(text=BACK_TEXT)


class Form(StatesGroup):
    choosing_manager = State()
    entering_name = State()
    entering_position = State()
    anonymous_reason = State()
    typing_message = State()
    uploading_file = State()


def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë®‚Äçüíº –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é")],
            [KeyboardButton(text="üì¢ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É")],
            [KeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")],
            [KeyboardButton(text="üìÇ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")]
        ],
        resize_keyboard=True
    )


# --- History helpers -------------------------------------------------------
async def push_history(state: FSMContext):
    current = await state.get_state()
    if not current:
        return
    data = await state.get_data()
    history = data.get("history", [])
    if not history or history[-1] != current:
        history.append(current)
        await state.update_data(history=history)


async def pop_previous(state: FSMContext):
    data = await state.get_data()
    history = data.get("history", [])
    if not history:
        return None
    prev = history.pop()
    await state.update_data(history=history)
    return prev
# ---------------------------------------------------------------------------


@router.message(Command("chat_id"))
async def chat_id(message: types.Message):
    await message.answer(f"Chat ID: {message.chat.id}")


@router.message(F.text == BACK_TEXT)
async def go_back(message: Message, state: FSMContext):
    prev = await pop_previous(state)
    if not prev:
        await state.clear()
        await state.update_data(history=[])
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    await state.set_state(prev)
    state_name = prev.split(":")[-1] if ":" in prev else prev

    if state_name == "choosing_manager":
        buttons = [[KeyboardButton(text=name)] for name in MANAGERS]
        kb = ReplyKeyboardMarkup(keyboard=buttons + [[BACK_BTN]], resize_keyboard=True, one_time_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=kb)
    elif state_name == "entering_name":
        kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="ü§ê –ê–Ω–æ–Ω–∏–º–Ω–æ")], [BACK_BTN]],
                                 resize_keyboard=True, one_time_keyboard=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–æ–Ω–∏–º–Ω–æ'.", reply_markup=kb)
    elif state_name == "entering_position":
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
    elif state_name == "anonymous_reason":
        await message.answer("–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º?",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
    elif state_name == "typing_message":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
    elif state_name == "uploading_file":
        await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (pdf, docx, xls, jpg, png) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ù–µ—Ç'.",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
    else:
        await state.clear()
        await state.update_data(history=[])
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(history=[])
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )


@router.message(F.text == "üë®‚Äçüíº –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é")
async def choose_manager(message: Message, state: FSMContext):
    await state.update_data(user_id=message.from_user.id, type="—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")
    await push_history(state)
    buttons = [[KeyboardButton(text=name)] for name in MANAGERS]
    kb = ReplyKeyboardMarkup(keyboard=buttons + [[BACK_BTN]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=kb)
    await state.set_state(Form.choosing_manager)


@router.message(Form.choosing_manager)
async def manager_chosen(message: Message, state: FSMContext):
    await push_history(state)
    await state.update_data(recipient=message.text)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="ü§ê –ê–Ω–æ–Ω–∏–º–Ω–æ")], [BACK_BTN]],
                             resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–æ–Ω–∏–º–Ω–æ'.", reply_markup=kb)
    await state.set_state(Form.entering_name)


@router.message(F.text.in_({
    "üì¢ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å",
    "üìù –ù–∞–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É",
    "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"
}))
async def choose_type(message: Message, state: FSMContext):
    type_map = {
        "üì¢ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å": "–æ–±—â–∏–π",
        "üìù –ù–∞–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É": "–¥–∏—Ä–µ–∫—Ç–æ—Ä",
        "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é": "–∏–¥–µ—è"
    }
    msg_type = type_map[message.text]
    await state.update_data(user_id=message.from_user.id, type=msg_type, recipient="")
    await push_history(state)

    if msg_type == "–¥–∏—Ä–µ–∫—Ç–æ—Ä":
        # –ë–µ–∑ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True,
                                                              one_time_keyboard=True))
    else:
        kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="ü§ê –ê–Ω–æ–Ω–∏–º–Ω–æ")], [BACK_BTN]],
                                 resize_keyboard=True, one_time_keyboard=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–æ–Ω–∏–º–Ω–æ'.", reply_markup=kb)
    await state.set_state(Form.entering_name)


@router.message(Form.entering_name)
async def get_name(message: Message, state: FSMContext):
    await push_history(state)
    text = message.text
    if text == "ü§ê –ê–Ω–æ–Ω–∏–º–Ω–æ":
        await state.update_data(is_anonymous=1, name="–ê–Ω–æ–Ω–∏–º", position="–ê–Ω–æ–Ω–∏–º")
        await message.answer("–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º?",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
        await state.set_state(Form.anonymous_reason)
    else:
        await state.update_data(is_anonymous=0, name=text)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
        await state.set_state(Form.entering_position)


@router.message(Form.entering_position)
async def get_position(message: Message, state: FSMContext):
    await push_history(state)
    await state.update_data(position=message.text, reason="")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
                         reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
    await state.set_state(Form.typing_message)


@router.message(Form.anonymous_reason)
async def get_reason(message: Message, state: FSMContext):
    await push_history(state)
    await state.update_data(reason=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
                         reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
    await state.set_state(Form.typing_message)


@router.message(Form.typing_message)
async def get_message(message: Message, state: FSMContext):
    await push_history(state)
    if len(message.text) > 1000:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(message=message.text)
    await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (pdf, docx, xls, jpg, png) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ù–µ—Ç'.",
                         reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
    await state.set_state(Form.uploading_file)


@router.message(Form.uploading_file)
async def handle_file_or_skip(message: Message, state: FSMContext):
    file_path = None

    try:
        if message.document:
            if message.document.mime_type in [
                "application/pdf",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "image/jpeg",
                "image/png"
            ]:
                file_path = await save_file(message)
            else:
                await message.answer("‚õî –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.",
                                     reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
                return
        elif message.photo:
            largest_photo = message.photo[-1]
            file = await message.bot.get_file(largest_photo.file_id)
            file_bytes = await message.bot.download_file(file.file_path)
            path = Path("uploads") / f"{message.from_user.id}_photo.jpg"
            path.parent.mkdir(exist_ok=True)
            async with aiofiles.open(path, "wb") as f:
                await f.write(file_bytes.getvalue())
            file_path = str(path)
        elif message.text and message.text.strip().lower() in ["–Ω–µ—Ç", "no"]:
            file_path = None
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (pdf, docx, xls, jpg, png) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ù–µ—Ç'.",
                                 reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
            return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[BACK_BTN]], resize_keyboard=True))
        return

    await state.update_data(file_path=file_path)
    user = await state.get_data()
    msg_id = insert_message(user)

    if user.get("is_anonymous"):
        text = (
            f"üì© –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{msg_id}\n"
            f"–ö–æ–º—É: {user.get('recipient','')}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏: {user.get('reason','')}\n"
            f"–¢–∏–ø: {user.get('type','')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{user.get('message','')}"
        )
    else:
        text = (
            f"üì© –û–±—Ä–∞—â–µ–Ω–∏–µ #{msg_id} –æ—Ç {user.get('name','')} ({user.get('position','')})\n"
            f"–ö–æ–º—É: {user.get('recipient','')}\n"
            f"–¢–∏–ø: {user.get('type','')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{user.get('message','')}"
        )

    for admin in ADMINS:
        try:
            if admin == message.chat.id:
                continue
            await message.bot.send_message(admin, text)
            if file_path:
                await message.bot.send_document(admin, types.FSInputFile(file_path))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin}: {e}")

    await state.clear()
    await state.update_data(history=[])
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=main_menu())


@router.message(F.text == "üìÇ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
async def show_my_requests(message: Message):
    rows = get_user_messages(message.from_user.id)
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
    else:
        result = []
        for r in rows:
            entry = f"üÜî#{r[0]} | –¢–∏–ø: {r[1]} | –°—Ç–∞—Ç—É—Å: {r[3]}\nüì® {r[2]}"
            if r[4]:
                entry += f"\nüì¨ –û—Ç–≤–µ—Ç: {r[4]}"
            result.append(entry)
        await message.answer("\n\n".join(result))
