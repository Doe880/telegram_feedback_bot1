from aiogram import Router, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from config import ADMINS, MANAGERS
from database import insert_message, get_user_messages
from pathlib import Path
import aiofiles
from utils import save_file
import logging

router = Router()

@router.message(Command("chat_id"))
async def chat_id(message: types.Message):
    await message.answer(f"Chat ID: {message.chat.id}")

class Form(StatesGroup):
    choosing_manager = State()
    entering_name = State()
    entering_position = State()
    anonymous_reason = State()
    typing_message = State()
    uploading_file = State()


def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë®‚Äçüíº –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é")],
            [KeyboardButton(text="üì¢ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É")],
            [KeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")],
            [KeyboardButton(text="üìÇ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")]
        ],
        resize_keyboard=True
    )


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ–µ–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )
    await state.clear()


@router.message(F.text == "üë®‚Äçüíº –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é")
async def choose_manager(message: Message, state: FSMContext):
    await state.update_data(user_id=message.from_user.id, type="—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")

    buttons = [[KeyboardButton(text=name)] for name in MANAGERS]
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    )
    await state.set_state(Form.choosing_manager)


@router.message(Form.choosing_manager)
async def manager_chosen(message: Message, state: FSMContext):
    await state.update_data(recipient=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–æ–Ω–∏–º–Ω–æ'.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="ü§ê –ê–Ω–æ–Ω–∏–º–Ω–æ")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(Form.entering_name)


@router.message(F.text.in_({
    "üì¢ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å",
    "üìù –ù–∞–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É",
    "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"
}))
async def choose_type(message: Message, state: FSMContext):
    type_map = {
        "üì¢ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å": "–æ–±—â–∏–π",
        "üìù –ù–∞–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—É": "–¥–∏—Ä–µ–∫—Ç–æ—Ä",
        "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é": "–∏–¥–µ—è"
    }
    await state.update_data(user_id=message.from_user.id,
                            type=type_map[message.text],
                            recipient="")

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–æ–Ω–∏–º–Ω–æ'.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="ü§ê –ê–Ω–æ–Ω–∏–º–Ω–æ")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(Form.entering_name)


@router.message(Form.entering_name)
async def get_name(message: Message, state: FSMContext):
    if message.text == "ü§ê –ê–Ω–æ–Ω–∏–º–Ω–æ":
        await state.update_data(is_anonymous=1, name="–ê–Ω–æ–Ω–∏–º", position="–ê–Ω–æ–Ω–∏–º")
        await message.answer("–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º?")
        await state.set_state(Form.anonymous_reason)
    else:
        await state.update_data(is_anonymous=0, name=message.text)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
        await state.set_state(Form.entering_position)


@router.message(Form.entering_position)
async def get_position(message: Message, state: FSMContext):
    await state.update_data(position=message.text, reason="")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.typing_message)


@router.message(Form.anonymous_reason)
async def get_reason(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.typing_message)


@router.message(Form.typing_message)
async def get_message(message: Message, state: FSMContext):
    if len(message.text) > 1000:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(message=message.text)
    await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (pdf, docx, xls, jpg, png) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ù–µ—Ç'.")
    await state.set_state(Form.uploading_file)


@router.message(Form.uploading_file)
async def handle_file_or_skip(message: Message, state: FSMContext):
    file_path = None

    try:
        # –î–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX, XLSX)
        if message.document:
            if message.document.mime_type in [
                "application/pdf",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "image/jpeg",
                "image/png"
            ]:
                file_path = await save_file(message)
            else:
                await message.answer("‚õî –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
                return

        # –§–æ—Ç–æ
        elif message.photo:
            largest_photo = message.photo[-1]
            file = await message.bot.get_file(largest_photo.file_id)
            file_bytes = await message.bot.download_file(file.file_path)

            path = Path("uploads") / f"{message.from_user.id}_photo.jpg"
            path.parent.mkdir(exist_ok=True)

            async with aiofiles.open(path, "wb") as f:
                await f.write(file_bytes.read())

            file_path = str(path)

        # –°–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ—Ç"
        elif message.text and message.text.strip().lower() in ["–Ω–µ—Ç", "no"]:
            file_path = None

        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (pdf, docx, xls, jpg, png) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ù–µ—Ç'.")
            return

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")
        return

    await state.update_data(file_path=file_path)
    user = await state.get_data()
    msg_id = insert_message(user)

    if user.get("is_anonymous"):
        text = (
            f"üì© –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{msg_id}\n"
            f"–ö–æ–º—É: {user.get('recipient','')}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏: {user.get('reason','')}\n"
            f"–¢–∏–ø: {user.get('type','')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{user.get('message','')}"
        )
    else:
        text = (
            f"üì© –û–±—Ä–∞—â–µ–Ω–∏–µ #{msg_id} –æ—Ç {user.get('name','')} ({user.get('position','')})\n"
            f"–ö–æ–º—É: {user.get('recipient','')}\n"
            f"–¢–∏–ø: {user.get('type','')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{user.get('message','')}"
        )

    for admin in ADMINS:
        if int(admin) == message.chat.id:
            continue  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.send_message(admin, text)
        if file_path:
            await message.bot.send_document(admin, types.FSInputFile(file_path))

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=main_menu())
    await state.clear()


@router.message(F.text == "üìÇ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
async def show_my_requests(message: Message):
    rows = get_user_messages(message.from_user.id)
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
    else:
        result = []
        for r in rows:
            entry = f"üÜî#{r[0]} | –¢–∏–ø: {r[1]} | –°—Ç–∞—Ç—É—Å: {r[3]}\nüì® {r[2]}"
            if r[4]:
                entry += f"\nüì¨ –û—Ç–≤–µ—Ç: {r[4]}"
            result.append(entry)
        await message.answer("\n\n".join(result))
